// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Pair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("pairID", Value.fromBigInt(BigInt.zero()));
    this.set("tokenA", Value.fromString(""));
    this.set("tokenAEntity", Value.fromString(""));
    this.set("tokenB", Value.fromString(""));
    this.set("tokenBEntity", Value.fromString(""));
    this.set("exchange", Value.fromString(""));
    this.set("router", Value.fromString(""));
    this.set("reserve", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Pair entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Pair", id.toString(), this);
    }
  }

  static load(id: string): Pair | null {
    return changetype<Pair | null>(store.get("Pair", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pairID(): BigInt {
    let value = this.get("pairID");
    return value!.toBigInt();
  }

  set pairID(value: BigInt) {
    this.set("pairID", Value.fromBigInt(value));
  }

  get tokenA(): string {
    let value = this.get("tokenA");
    return value!.toString();
  }

  set tokenA(value: string) {
    this.set("tokenA", Value.fromString(value));
  }

  get tokenAEntity(): string {
    let value = this.get("tokenAEntity");
    return value!.toString();
  }

  set tokenAEntity(value: string) {
    this.set("tokenAEntity", Value.fromString(value));
  }

  get tokenB(): string {
    let value = this.get("tokenB");
    return value!.toString();
  }

  set tokenB(value: string) {
    this.set("tokenB", Value.fromString(value));
  }

  get tokenBEntity(): string {
    let value = this.get("tokenBEntity");
    return value!.toString();
  }

  set tokenBEntity(value: string) {
    this.set("tokenBEntity", Value.fromString(value));
  }

  get exchange(): string {
    let value = this.get("exchange");
    return value!.toString();
  }

  set exchange(value: string) {
    this.set("exchange", Value.fromString(value));
  }

  get router(): string {
    let value = this.get("router");
    return value!.toString();
  }

  set router(value: string) {
    this.set("router", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    return value!.toString();
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("decimal", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimal(): BigInt {
    let value = this.get("decimal");
    return value!.toBigInt();
  }

  set decimal(value: BigInt) {
    this.set("decimal", Value.fromBigInt(value));
  }
}

export class Reserve extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("reserve0", Value.fromBigInt(BigInt.zero()));
    this.set("reserve1", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reserve entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Reserve entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Reserve", id.toString(), this);
    }
  }

  static load(id: string): Reserve | null {
    return changetype<Reserve | null>(store.get("Reserve", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reserve0(): BigInt {
    let value = this.get("reserve0");
    return value!.toBigInt();
  }

  set reserve0(value: BigInt) {
    this.set("reserve0", Value.fromBigInt(value));
  }

  get reserve1(): BigInt {
    let value = this.get("reserve1");
    return value!.toBigInt();
  }

  set reserve1(value: BigInt) {
    this.set("reserve1", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
